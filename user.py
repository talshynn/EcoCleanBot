from aiogram import types
from aiogram.types import InputFile

from database.db import cursor, conn, get_user_info

import os

import *

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
@dp.message_handler(
    lambda message: registered and message.text in ["–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "–ó–∞–∫–∞–∂–∏—Ç–µ –æ—á–∏—Å—Ç–∫—É", "–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"])
async def process_menu(message: types.Message):
    if message.text == "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_info = await get_user_info(phone_number, registered)
        await message.answer(user_info)
    elif message.text == "–ó–∞–∫–∞–∂–∏—Ç–µ –æ—á–∏—Å—Ç–∫—É":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ –æ—á–∏—Å—Ç–∫–∏
        await order_cleaning(message)
    elif message.text == "–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        await leave_feedback(message)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
# @dp.message_handler(lambda message: message.text == "–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
async def leave_feedback(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if registered:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        dp.register_message_handler(process_feedback, content_types=types.ContentType.TEXT)
    else:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
async def process_feedback(message: types.Message):
    feedback = message.text
    try:
        # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Å—Ç–∞–≤–∏–≤—à–µ–≥–æ –æ—Ç–∑—ã–≤
        cursor.execute('SELECT id FROM users WHERE phone_number=?', (phone_number,))
        user_id = cursor.fetchone()[0]  # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        cursor.execute('INSERT INTO feedbacks (user_id, text) VALUES (?, ?)', (user_id, feedback))
        conn.commit()
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –æ—Ç–∑—ã–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    finally:
        # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        dp.message_handlers.unregister(process_feedback)


def calculate_cleaning_cost(cleaning_type, area, single_windows, double_windows, triple_windows):
    # –†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É–±–æ—Ä–∫–∏ –ø–æ —Ç–∏–ø—É
    if cleaning_type == "–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è":
        base_cost = area * 1500
    elif cleaning_type == "–ü–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞":
        base_cost = area * 2000
    elif cleaning_type == "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è":
        base_cost = area * 800
    else:
        base_cost = 0

    # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É–±–æ—Ä–∫–∏ –æ–∫–æ–Ω
    window_cost = (single_windows * 300) + (double_windows * 500) + (triple_windows * 700)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
    return base_cost + window_cost




@dp.message_handler(lambda message: message.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏")
async def show_company_info(message: types.Message):
    try:
        cursor.execute('SELECT name, address, phone, working_hours, website, email FROM company_info')
        company_data = cursor.fetchone()
        if company_data:
            name, address, phone, working_hours, website, email = company_data
            company_info = f"""
            üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: {name}
        üìç –ê–¥—Ä–µ—Å: {address} 
        üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}
        üïí –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: {working_hours}
        üåê –í–µ–±-—Å–∞–π—Ç: {website}
        üìß Email: {email}
            """
            await message.answer(company_info, reply_markup=markup)
        else:
            await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏.")


@dp.message_handler(lambda message: message.text == "–¶–µ–Ω—ã")
async def price_list(message: types.Message):
    cost_info = "–¢–∏–ø —É–±–æ—Ä–∫–∏: \n\n–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±—Ä–æ–∫–∞ üßΩ: 1500 —Ç–≥ –∑–∞ –∫–≤.–º. \n–ü–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞ üßº: 2000 —Ç–≥ –∑–∞ –∫–≤.–º. \n–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è üßπ: 800 —Ç–≥ –∑–∞ –∫–≤.–º. \n\n–û–∫–Ω–∞: \n\n–û–¥–Ω–æ—Å—Ç–≤–æ—Ä—á–∞—Ç–æ–µ ü™ü: 300 —Ç–≥ –∑–∞ –∫–æ–ª-–≤–æ \n–î–≤—É—Å—Ç–≤–æ—Ä—á–∞—Ç–æ–µ ü™üü™ü: 500 —Ç–≥ –∑–∞ –∫–æ–ª-–≤–æ \n–¢—Ä–µ—Ö—Å—Ç–≤–æ—Ä—á–∞—Ç–æ–µ ü™üü™üü™ü: 700 —Ç–≥ –∑–∞ –∫–æ–ª-–≤–æ"
    await message.answer(cost_info, reply_markup=markup)


@dp.message_handler(lambda message: message.text == "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏")
async def show_all_news(message: types.Message):
    cursor.execute("SELECT title, content, image_path FROM news ORDER BY published_date DESC")
    news_items = cursor.fetchall()
    if news_items:
        for title, content, image_path in news_items:
            news_message = f"{title}\n{content}"
            if os.path.exists(image_path):
                await message.answer_photo(photo=open(image_path, 'rb'), caption=news_message)
            else:
                await message.answer(news_message)
    else:
        await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–§–æ—Ç–æ –≥–∞–ª–µ—Ä–µ—è –æ—Ç–µ–ª—è"
@dp.message_handler(lambda message: message.text == "–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã")
async def show_hotel_gallery(message: types.Message):
    global registered  # –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∫–∞–∫ –≥–ª–æ–±–∞–ª—å–Ω—É—é
    if registered:
        # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –æ—Ç–µ–ª—è
        gallery_path = "resources/img"

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
        photo_files = os.listdir(gallery_path)

        if photo_files:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            for photo_file in photo_files:
                photo_full_path = os.path.join(gallery_path, photo_file)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º InputFile
                with open(photo_full_path, 'rb') as photo:
                    await message.answer_photo(photo=InputFile(photo))
                    await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=markup)
        else:
            await message.answer("–§–æ—Ç–æ –Ω–µ—Ç.")
    else:
        await message.answer("–ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")