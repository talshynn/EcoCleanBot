import os
import logging
import sqlite3
import openai
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove,InputFile
import asyncio
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—à–∏–±–æ–∫
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token="")
# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –±–æ—Ç–∞ –∏ loop
# –°–æ–∑–¥–∞–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≤ –ø–∞–º—è—Ç–∏
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª—é—á–∞ API OpenAI
openai.api_key = ''

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('userdata.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
def create_tables():
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            phone_number TEXT,
            birthday TEXT
        )
    ''')
    conn.commit()
    logger.info("Table 'users' created successfully")

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS feedbacks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            text TEXT,
            FOREIGN KEY(user_id) REFERENCES users(id)
        )
    ''')
    conn.commit()
    logger.info("Table 'feedbacks' created successfully")

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            cleaning_type TEXT,
            cleaning_standard TEXT,
            area INTEGER,
            address TEXT,
            cost INTEGER,
            FOREIGN KEY(user_id) REFERENCES users(id)
        )
    ''')
    conn.commit()
    logger.info("Table 'orders' created successfully")

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é
markup = ReplyKeyboardMarkup(resize_keyboard=True)
markup.add(KeyboardButton("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"))
markup.add(KeyboardButton("–ó–∞–∫–∞–∂–∏—Ç–µ –æ—á–∏—Å—Ç–∫—É"))
markup.add(KeyboardButton("–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"))
markup.add(KeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏"))
markup.add(KeyboardButton("–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã"))
markup.add(KeyboardButton("–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å OpenAI"))

class CleaningOrder(StatesGroup):
    waiting_for_cleaning_type = State()
    waiting_for_area = State()
    waiting_for_address = State()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
name = ""
phone_number = ""
birthday = ""
registered = False  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
cleaning_type = ""
cleaning_standard = ""
area = 0

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
@dp.message_handler(lambda message: registered and message.text in ["–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "–ó–∞–∫–∞–∂–∏—Ç–µ –æ—á–∏—Å—Ç–∫—É", "–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"])
async def process_menu(message: types.Message):
    if message.text == "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_info = await get_user_info(phone_number)
        await message.answer(user_info)
    elif message.text == "–ó–∞–∫–∞–∂–∏—Ç–µ –æ—á–∏—Å—Ç–∫—É":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ –æ—á–∏—Å—Ç–∫–∏
        await order_cleaning(message)
    elif message.text == "–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        await leave_feedback(message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def get_user_info(phone_number):
    if registered:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            cursor.execute('SELECT name, birthday FROM users WHERE phone_number=?', (phone_number,))
            user_data = cursor.fetchone()
            if user_data:
                name, birthday = user_data
                return f"–ò–º—è: {name}\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birthday}"
            else:
                return "–î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        except Exception as e:
            logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
    else:
        return "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
@dp.message_handler(lambda message: message.text == "–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
async def leave_feedback(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if registered:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        dp.register_message_handler(process_feedback, content_types=types.ContentType.TEXT)
    else:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
async def process_feedback(message: types.Message):
    feedback = message.text
    try:
        # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Å—Ç–∞–≤–∏–≤—à–µ–≥–æ –æ—Ç–∑—ã–≤
        cursor.execute('SELECT id FROM users WHERE phone_number=?', (phone_number,))
        user_id = cursor.fetchone()[0]  # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        cursor.execute('INSERT INTO feedbacks (user_id, text) VALUES (?, ?)', (user_id, feedback))
        conn.commit()
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –æ—Ç–∑—ã–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    finally:
        # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        dp.message_handlers.unregister(process_feedback)

def calculate_cleaning_cost(cleaning_type, cleaning_standard, area):
    if cleaning_type == "–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è":
        return area * 1500
    elif cleaning_type == "–ü–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞":
        return area * 2000
    elif cleaning_type == "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è":
        return area * 800
    else:
        return 0

@dp.message_handler(lambda message: message.text == "–ó–∞–∫–∞–∂–∏—Ç–µ –æ—á–∏—Å—Ç–∫—É", state="*")
async def order_cleaning(message: types.Message):
    await CleaningOrder.waiting_for_cleaning_type.set()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–±–æ—Ä–∫–∏üëá",
                         reply_markup=ReplyKeyboardMarkup(
                             keyboard=[
                                 [KeyboardButton(text="–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è")],
                                 [KeyboardButton(text="–ü–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞")],
                                 [KeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è")]
                             ],
                             resize_keyboard=True,
                             selective=True
                         ))

# Handler for receiving cleaning type
@dp.message_handler(state=CleaningOrder.waiting_for_cleaning_type)
async def set_cleaning_type(message: types.Message, state: FSMContext):
    if message.text not in ["–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è", "–ü–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞", "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–±–æ—Ä–∫–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")
        return
    await state.update_data(cleaning_type=message.text)
    await CleaningOrder.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∞—Ö:")

# Handler for receiving area
@dp.message_handler(state=CleaningOrder.waiting_for_area)
async def set_area(message: types.Message, state: FSMContext):
    area = message.text
    if not area.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–∏.")
        return
    await state.update_data(area=int(area))
    await CleaningOrder.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —É–±–æ—Ä–∫–∏:")

# Handler for receiving address
@dp.message_handler(state=CleaningOrder.waiting_for_address)
async def set_address(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    user_data = await state.get_data()
    cleaning_type = user_data['cleaning_type']
    area = user_data['area']
    cost = calculate_cleaning_cost(cleaning_type, "standard", area)
    address = user_data['address']

    # Save order in database
    cursor.execute('''
        INSERT INTO orders (user_id, cleaning_type, cleaning_standard, area, address, cost)
        VALUES (?, ?, ?, ?, ?, ?)
    ''', (message.from_user.id, cleaning_type, "standard", area, address, cost))
    conn.commit()

    await message.answer(f"–ó–∞–∫–∞–∑ –Ω–∞ —É–±–æ—Ä–∫—É —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –¢–∏–ø: {cleaning_type}, –ü–ª–æ—â–∞–¥—å: {area} –∫–≤.–º, –ê–¥—Ä–µ—Å: {address}, –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost}—Ç–µ–Ω–≥–µ")
     # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é
    await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=markup)
    await state.finish()

@dp.message_handler(lambda message: message.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏")
async def show_company_info(message: types.Message):
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏
    company_info = """
    üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: EcoClean
    üìç –ê–¥—Ä–µ—Å: –≥. –ù—É—Ä-–°—É–ª—Ç–∞–Ω, —É–ª. –ü—É—à–∫–∏–Ω–∞, –¥. 10
    üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 777 123 4567
    üïí –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: –ü–Ω-–ü—Ç, —Å 9:00 –¥–æ 18:00
    üåê –í–µ–±-—Å–∞–π—Ç: www.ecoclean.kz
    üìß Email: info@ecoclean.kz
    """
    await message.answer(company_info, reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–§–æ—Ç–æ –≥–∞–ª–µ—Ä–µ—è –æ—Ç–µ–ª—è"
@dp.message_handler(lambda message: message.text == "–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã")
async def show_hotel_gallery(message: types.Message):
    global registered  # –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∫–∞–∫ –≥–ª–æ–±–∞–ª—å–Ω—É—é
    if registered:
        # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –æ—Ç–µ–ª—è
        gallery_path = "img"

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
        photo_files = os.listdir(gallery_path)

        if photo_files:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            for photo_file in photo_files:
                photo_full_path = os.path.join(gallery_path, photo_file)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º InputFile
                with open(photo_full_path, 'rb') as photo:
                    await message.answer_photo(photo=InputFile(photo))
                    await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=markup)
        else:
            await message.answer("“ö–æ–Ω–∞“õ “Ø–π –≥–∞–ª–µ—Ä–µ—è—Å—ã–Ω–¥–∞ —Ñ–æ—Ç–æ—Å—É—Ä–µ—Ç—Ç–µ—Ä –∂–æ“õ.")
    else:
        await message.answer("–ê–ª–¥—ã–º–µ–Ω —Ç—ñ—Ä–∫–µ—É–¥–µ–Ω ”©—Ç—ñ“£—ñ–∑!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∞ "–ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"
    await message.answer("EcoCleanBot - —É–¥–æ–±–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —É–±–æ—Ä–∫—É –∏ —Ö–∏–º—á–∏—Å—Ç–∫—É. \n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—éüëá",
                         reply_markup=ReplyKeyboardMarkup(
                             keyboard=[
                                 [KeyboardButton(text="–ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")]
                             ],
                             resize_keyboard=True,
                             selective=True  # –î–æ–±–∞–≤–∏–º –∞—Ç—Ä–∏–±—É—Ç selective=True
                         ))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"
@dp.message_handler(lambda message: message.text == "–ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
async def register_start(message: types.Message):
    # –ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—èüëá",
                         reply_markup=ReplyKeyboardRemove())  # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–º–µ–Ω–∏
@dp.message_handler(lambda message: name == "")
async def register_name(message: types.Message):
    global name
    name = message.text
    # –ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await message.answer("–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü—Ä–∏–º–µ—Ä: +77007801799",
                         reply_markup=ReplyKeyboardRemove())  # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message_handler(lambda message: phone_number == "")
async def register_phone(message: types.Message):
    global phone_number
    phone_number = message.text
    # –ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì. –ù–∞–ø—Ä–∏–º–µ—Ä, 01.01.2000",
                         reply_markup=ReplyKeyboardRemove())  # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
@dp.message_handler(lambda message: birthday == "")
async def register_birthday(message: types.Message):
    global birthday
    birthday = message.text
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é" / "–ò–∑–º–µ–Ω–∏—Ç—å"
    user_info = f"–í–∞—à–µ –∏–º—è: {name}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birthday}"
    await message.answer(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n{user_info}",
                         reply_markup=ReplyKeyboardMarkup(
                             keyboard=[
                                 [KeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é")],
                                 [KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å")]
                             ],
                             resize_keyboard=True,
                             selective=True  # –î–æ–±–∞–≤–∏–º –∞—Ç—Ä–∏–±—É—Ç selective=True
                         ))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é" / "–ò–∑–º–µ–Ω–∏—Ç—å"
@dp.message_handler(lambda message: message.text in ["–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", "–ò–∑–º–µ–Ω–∏—Ç—å"])
async def register_confirmation(message: types.Message):
    global name, phone_number, birthday, registered
    if message.text == "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é":
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute('''
            INSERT INTO users (name, phone_number, birthday)
            VALUES (?, ?, ?)
        ''', (name, phone_number, birthday))
        conn.commit()
        # –ü–æ–ª—É—á–∞–µ–º id –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = cursor.lastrowid
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
        registered = True
    else:
        # –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        name = ""
        phone_number = ""
        birthday = ""
        await message.answer("–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ!")
        await message.answer("–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—éüëá",
                             reply_markup=ReplyKeyboardMarkup(
                                 keyboard=[
                                     [KeyboardButton(text="–ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")]
                                 ],
                                 resize_keyboard=True,
                                 selective=True
                             ))

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–∏–∞–ª–æ–≥–∞ —Å OpenAI
openai_dialog_active = False

@dp.message_handler(lambda message: message.text == "–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å OpenAI" and not openai_dialog_active)
async def start_openai_dialog(message: types.Message):
    global openai_dialog_active
    openai_dialog_active = True
    await openai_dialog_start(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–∏–∞–ª–æ–≥–∞ —Å OpenAI
async def openai_dialog_start(message: types.Message):
    await message.answer("–í—ã –Ω–∞—á–∞–ª–∏ –¥–∏–∞–ª–æ–≥ —Å OpenAI. –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
    # –ó–¥–µ—Å—å –º—ã –Ω–µ –±—É–¥–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–ª–∞–≥ openai_dialog_active

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenAI
@dp.message_handler(lambda message: openai_dialog_active)
async def process_openai_question(message: types.Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ OpenAI –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    response = openai.ChatCompletion.create(
        model="gpt-4-turbo-preview",  
        messages=[{"role": "user", "content": message.text}]
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç OpenAI –±–æ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(response.choices[0].message['content'])

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
    global openai_dialog_active
    openai_dialog_active = False
    await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=markup)



# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    create_tables()  # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    executor.start_polling(dp, skip_updates=True)
