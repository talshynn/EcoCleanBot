from aiogram import types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputFile

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from database.db import cursor, conn


@dp.message_handler(lambda message: message.text == "–ó–∞–∫–∞–∂–∏—Ç–µ –æ—á–∏—Å—Ç–∫—É", state="*")
async def order_cleaning(message: types.Message):
    await CleaningOrder.waiting_for_cleaning_type.set()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–±–æ—Ä–∫–∏üëá",
                         reply_markup=ReplyKeyboardMarkup(
                             keyboard=[
                                 [KeyboardButton(text="–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è")],
                                 [KeyboardButton(text="–ü–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞")],
                                 [KeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è")]
                             ],
                             resize_keyboard=True,
                             selective=True
                         ))


# Define the states
class CleaningOrder(StatesGroup):
    waiting_for_cleaning_type = State()
    waiting_for_area = State()
    waiting_for_window_cleaning = State()
    waiting_for_single_windows = State()
    waiting_for_double_windows = State()
    waiting_for_triple_windows = State()
    waiting_for_date_and_time = State()  # –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    waiting_for_address = State()


# Handler for setting cleaning type
@dp.message_handler(state=CleaningOrder.waiting_for_cleaning_type)
async def set_cleaning_type(message: types.Message, state: FSMContext):
    if message.text not in ["–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è", "–ü–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞", "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–±–æ—Ä–∫–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")
        return
    await state.update_data(cleaning_type=message.text)
    await CleaningOrder.waiting_for_area.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∞—Ö:")


# Handler for receiving area
@dp.message_handler(state=CleaningOrder.waiting_for_area)
async def set_area(message: types.Message, state: FSMContext):
    area = message.text
    if not area.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–∏.")
        return
    await state.update_data(area=int(area))
    await CleaningOrder.waiting_for_window_cleaning.set()
    await message.answer("–ú–æ–µ–º –æ–∫–Ω–∞? –î–∞ –∏–ª–∏ –ù–µ—Ç")


# Handler for window cleaning decision
@dp.message_handler(state=CleaningOrder.waiting_for_window_cleaning)
async def ask_window_cleaning(message: types.Message, state: FSMContext):
    if message.text.lower() == "–¥–∞":
        await CleaningOrder.waiting_for_single_windows.set()
        await message.answer("–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –æ–¥–Ω–æ—Å—Ç–≤–æ—Ä—á–∞—Ç–æ–≥–æ –æ–∫–Ω–∞ üëá")
        photo = InputFile("resources/photo/o1.jpg")  # –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        await message.answer_photo(photo=photo, caption="–ü—Ä–∏–º–µ—Ä –æ–¥–Ω–æ—Å—Ç–≤–æ—Ä—á–∞—Ç–æ–≥–æ –æ–∫–Ω–∞")
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ—Å—Ç–≤–æ—Ä—á–∞—Ç—ã—Ö –æ–∫–æ–Ω –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏üëá")
    elif message.text.lower() == "–Ω–µ—Ç":
        await CleaningOrder.waiting_for_date_and_time.set()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —É–±–æ—Ä–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:")


# Handlers for single, double, and triple pane windows
@dp.message_handler(state=CleaningOrder.waiting_for_single_windows)
async def set_single_windows(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–¥–Ω–æ—Å—Ç–≤–æ—Ä—á–∞—Ç—ã—Ö –æ–∫–æ–Ω.")
        return
    await state.update_data(single_windows=int(message.text))
    await CleaningOrder.waiting_for_double_windows.set()
    await message.answer("–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –¥–≤—É—Å—Ç–≤–æ—Ä—á–∞—Ç–æ–≥–æ –æ–∫–Ω–∞ üëá")
    photo = InputFile("resources/photo/o2.jpg")  # –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    await message.answer_photo(photo=photo, caption="–ü—Ä–∏–º–µ—Ä –¥–≤—É—Å—Ç–≤–æ—Ä—á–∞—Ç–æ–≥–æ –æ–∫–Ω–∞")
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–≤—É—Å—Ç–≤–æ—Ä—á–∞—Ç—ã—Ö –æ–∫–æ–Ω –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏üëá")


@dp.message_handler(state=CleaningOrder.waiting_for_double_windows)
async def set_double_windows(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–≤—É—Å—Ç–≤–æ—Ä—á–∞—Ç—ã—Ö –æ–∫–æ–Ω.")
        return
    await state.update_data(double_windows=int(message.text))
    await CleaningOrder.waiting_for_triple_windows.set()
    await message.answer("–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä —Ç—Ä–µ—Ö—Å—Ç–≤–æ—Ä—á–∞—Ç–æ–≥–æ –æ–∫–Ω–∞ üëá")
    photo = InputFile("resources/photo/o3.jpg")  # –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    await message.answer_photo(photo=photo, caption="–ü—Ä–∏–º–µ—Ä —Ç—Ä–µ—Ö—Å—Ç–≤–æ—Ä—á–∞—Ç–æ–≥–æ –æ–∫–Ω–∞")
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ—Ö—Å—Ç–≤–æ—Ä—á–∞—Ç—ã—Ö –æ–∫–æ–Ω –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏üëá")


@dp.message_handler(state=CleaningOrder.waiting_for_triple_windows)
async def set_triple_windows(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–µ—Ö—Å—Ç–≤–æ—Ä—á–∞—Ç—ã—Ö –æ–∫–æ–Ω.")
        return
    await state.update_data(triple_windows=int(message.text))
    await CleaningOrder.waiting_for_date_and_time.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —É–±–æ—Ä–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:")


# Handler for receiving date and time
@dp.message_handler(state=CleaningOrder.waiting_for_date_and_time)
async def set_date_and_time(message: types.Message, state: FSMContext):
    await state.update_data(date_and_time=message.text)
    await CleaningOrder.waiting_for_address.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —É–±–æ—Ä–∫–∏:")


# Handler for receiving address
@dp.message_handler(state=CleaningOrder.waiting_for_address)
async def set_address(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    user_data = await state.get_data()
    cleaning_type = user_data['cleaning_type']
    area = user_data['area']
    single_windows = user_data.get('single_windows', 0)
    double_windows = user_data.get('double_windows', 0)
    triple_windows = user_data.get('triple_windows', 0)
    date_and_time = user_data['date_and_time']
    address = user_data['address']
    cost = calculate_cleaning_cost(cleaning_type, area, single_windows, double_windows, triple_windows)

    # Save order in database
    cursor.execute('''
        INSERT INTO orders (user_id, cleaning_type, area, single_windows, double_windows, triple_windows, date_and_time, address, cost)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', (
        message.from_user.id, cleaning_type, area, single_windows, double_windows, triple_windows, date_and_time,
        address,
        cost))
    conn.commit()

    await message.answer(
        f"–ó–∞–∫–∞–∑ –Ω–∞ —É–±–æ—Ä–∫—É —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –¢–∏–ø: {cleaning_type}, –ü–ª–æ—â–∞–¥—å: {area} –∫–≤.–º, –û–∫–Ω–∞: –æ–¥–Ω–æ—Å—Ç–≤–æ—Ä—á–∞—Ç—ã–µ {single_windows}, –¥–≤—É—Å—Ç–≤–æ—Ä—á–∞—Ç—ã–µ {double_windows}, —Ç—Ä–µ—Ö—Å—Ç–≤–æ—Ä—á–∞—Ç—ã–µ {triple_windows}, –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {date_and_time}, –ê–¥—Ä–µ—Å: {address}, –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost} —Ç–µ–Ω–≥–µ")
    await state.finish()
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ –æ–ø—Ü–∏–∏
    await message.answer(
        "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª–µ–πü§ù\n –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚úîÔ∏è",
        reply_markup=markup)